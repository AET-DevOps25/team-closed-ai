{{- if .Values.prometheus.enabled }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: {{ .Values.namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus
  namespace: {{ .Values.namespace }}
rules:
- apiGroups: [""]
  resources:
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus
  namespace: {{ .Values.namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: {{ .Values.namespace }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Values.namespace }}
data:
  prometheus.yml: |
    global:
      scrape_interval: {{ .Values.prometheus.config.scrape_interval }}
      evaluation_interval: {{ .Values.prometheus.config.evaluation_interval }}
    scrape_configs:
      - job_name: "genai-service"
        static_configs:
          - targets: ["{{ $.Release.Name }}-genai-service:8084"]
        metrics_path: "/metrics"

      - job_name: "project-service"
        static_configs:
        - targets: ["{{ $.Release.Name }}-project-service:8083"]
        metrics_path: "/actuator/prometheus"

      - job_name: "task-service"
        static_configs:
          - targets: ["{{ $.Release.Name }}-task-service:8081"]
        metrics_path: "/actuator/prometheus"

      - job_name: "user-service"
        static_configs:
          - targets: ["{{ $.Release.Name }}-user-service:8082"]
        metrics_path: "/actuator/prometheus"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        runAsNonRoot: true
      imagePullSecrets:
        - name: dockerhub-secret
      containers:
      - name: prometheus
        image: "{{ .Values.prometheus.image.repository }}:{{ .Values.prometheus.image.tag }}"
        ports:
        - containerPort: {{ .Values.prometheus.port }}
        resources:
          {{- toYaml .Values.prometheus.resources | nindent 12 }}
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: storage
        {{- if .Values.prometheus.persistence.enabled }}
        persistentVolumeClaim:
          claimName: prometheus-storage
        {{- else }}
        emptyDir: {}
        {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server
  namespace: {{ .Values.namespace }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.prometheus.port }}"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: prometheus
  ports:
  - port: {{ .Values.prometheus.port }}
    targetPort: {{ .Values.prometheus.port }}

{{- if .Values.prometheus.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: {{ .Values.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.prometheus.persistence.size }}
{{- end }}
{{- end }} 