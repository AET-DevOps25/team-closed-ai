services:
  client:
    build:
      context: ./client
      dockerfile: local.Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=PathPrefix(`/`)"
      - "traefik.http.services.client.loadbalancer.server.port=3000"

  traefik:
    image: traefik:v3.4.1
    container_name: traefik
    ports:
      - "80:80" # HTTP entrypoint
      - "8080:8080" # dashboard (insecure)
    command:
      - --api.insecure=true
      - --providers.docker=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  project-service:
    build:
      context: ./server
      dockerfile: project-service/Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.project.rule=PathPrefix(`/projects`)"
      - "traefik.http.services.project.loadbalancer.server.port=8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/closedai
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_PROFILES_ACTIVE=shared,shared-docker

  user-service:
    build:
      context: ./server
      dockerfile: user-service/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user.rule=PathPrefix(`/users`)"
      - "traefik.http.services.user.loadbalancer.server.port=8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/closedai
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_PROFILES_ACTIVE=shared,shared-docker

  task-service:
    build:
      context: ./server
      dockerfile: task-service/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.task.rule=PathPrefix(`/tasks`)"
      - "traefik.http.services.task.loadbalancer.server.port=8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/closedai
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_PROFILES_ACTIVE=shared,shared-docker

  postgres:
    image: pgvector/pgvector:pg16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=closedai
    volumes:
      - postgres_data:/var/lib/postgresql/data

  genai:
    build:
      context: ./genai
      dockerfile: Dockerfile
    env_file:
      - ./genai/.env
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - ollama
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.genai.rule=PathPrefix(`/genai`)"
      - "traefik.http.services.genai.loadbalancer.server.port=8084"
    restart: unless-stopped
  
  vectorizer-worker:
    image: timescale/pgai-vectorizer-worker:latest
    env_file:
      - ./genai/.env
    depends_on:
      - postgres
      - ollama
    command: ["--poll-interval", "5s"]

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    env_file:
      - ./genai/.env
    volumes:
      - ollama_data:/ollama_data

  prometheus:
    image: prom/prometheus:latest
    container_name: closed-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost/prometheus/'
      - '--web.route-prefix=/prometheus'
    depends_on:
      - project-service
      - task-service
      - user-service
      - genai
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=PathPrefix(`/prometheus`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:latest
    container_name: closed-ai-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

volumes:
  postgres_data:
  ollama_data:
  prometheus_data:
  grafana_data:
