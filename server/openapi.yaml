openapi: 3.1.0
info:
  title: DevOps Closed AI Server API
  description: API documentation for the DevOps Closed AI Server
  version: 1.0.0
servers:
  - url: http://localhost:8083
    description: Project Service
  - url: http://localhost:8082
    description: Task Service
  - url: http://localhost:8081
    description: User Service
tags:
  - Project
  - Task
  - User

paths:
  # Project Service Endpoints
  /projects:
    get:
      tags:
        - Project
      summary: Get all projects
      operationId: getAllProjects
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDto'
    post:
      tags:
        - Project
      summary: Create a new project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDto'
      responses:
        '200':
          description: The created project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDto'

  /projects/{id}:
    get:
      tags:
        - Project
      summary: Get a project by ID
      operationId: getProjectById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The project with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDto'
        '404':
          description: Project not found
    put:
      tags:
        - Project
      summary: Update a project
      operationId: updateProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDto'
      responses:
        '200':
          description: The updated project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDto'
        '404':
          description: Project not found
    delete:
      tags:
        - Project
      summary: Delete a project
      operationId: deleteProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Project deleted successfully
        '404':
          description: Project not found

  /projects/{id}/tasks:
    post:
      tags:
        - Project
      summary: Add a task to a project
      operationId: addTaskToProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTaskDto'
      responses:
        '200':
          description: The created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '404':
          description: Project not found

  # Task Service Endpoints
  /tasks:
    get:
      tags:
        - Task
      summary: Get all tasks
      operationId: getAllTasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDto'

  /tasks/{id}:
    get:
      tags:
        - Task
      summary: Get a task by ID
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The task with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '404':
          description: Task not found
    put:
      tags:
        - Task
      summary: Update a task
      operationId: updateTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDto'
      responses:
        '200':
          description: The updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '404':
          description: Task not found
    delete:
      tags:
        - Task
      summary: Delete a task
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task deleted successfully
        '404':
          description: Task not found

  /tasks/{id}/status:
    patch:
      tags:
        - Task
      summary: Change the status of a task
      operationId: changeTaskStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/TaskStatus'
      responses:
        '200':
          description: The updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '404':
          description: Task not found

  /tasks/by-assignee/{id}:
    get:
      tags:
        - Task
      summary: Get tasks by assignee
      operationId: getTasksByAssignee
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of tasks assigned to the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDto'
        '404':
          description: User not found

  /tasks/by-project/{id}:
    get:
      tags:
        - Task
      summary: Get tasks by project
      operationId: getTasksByProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of tasks for the project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDto'
        '404':
          description: Project not found

  # User Service Endpoints
  /users:
    get:
      tags:
        - User
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
    post:
      tags:
        - User
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /users/{id}:
    get:
      tags:
        - User
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The user with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Update a user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
    delete:
      tags:
        - User
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found

components:
  schemas:
    ProjectDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        taskIds:
          type: array
          items:
            type: integer
            format: int64
      required:
        - id
        - name
        - taskIds

    CreateProjectDto:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    TaskDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'
        comments:
          type: array
          items:
            type: string
        attachments:
          type: array
          items:
            type: string
        assigneeId:
          type: integer
          format: int64
          nullable: true
      required:
        - id
        - title
        - description
        - taskStatus
        - comments
        - attachments

    AddTaskDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
        - description

    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        profilePicture:
          type: string
      required:
        - id
        - name
        - profilePicture

    TaskStatus:
      type: string
      enum:
        - OPEN
        - IN_PROGRESS
        - DONE
