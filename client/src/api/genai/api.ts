/* tslint:disable */
/* eslint-disable */
/**
 * GenAI Kanban Assistant
 * AI-powered service for intelligent Kanban task management and question answering
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * AddTaskDto
 * @export
 * @interface AddTaskDto
 */
export interface AddTaskDto {
    /**
     * 
     * @type {string}
     * @memberof AddTaskDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AddTaskDto
     */
    'description': string;
    /**
     * 
     * @type {TaskStatus}
     * @memberof AddTaskDto
     */
    'taskStatus'?: TaskStatus | null;
    /**
     * 
     * @type {number}
     * @memberof AddTaskDto
     */
    'assigneeId'?: number | null;
}


/**
 * Response model containing AI interpretation results
 * @export
 * @interface GenAIResponse
 */
export interface GenAIResponse {
    /**
     * The classified intent of the prompt (generation or answering)
     * @type {string}
     * @memberof GenAIResponse
     */
    'intent': string;
    /**
     * Human-readable response from the AI explaining the interpretation
     * @type {string}
     * @memberof GenAIResponse
     */
    'answer': string;
    /**
     * List of existing tasks relevant to the prompt (used for answering intent)
     * @type {Array<TaskDto>}
     * @memberof GenAIResponse
     */
    'existing_tasks'?: Array<TaskDto>;
    /**
     * List of new tasks generated based on the prompt (used for generation intent)
     * @type {Array<AddTaskDto>}
     * @memberof GenAIResponse
     */
    'new_tasks'?: Array<AddTaskDto>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Request model for AI prompt interpretation
 * @export
 * @interface PromptRequest
 */
export interface PromptRequest {
    /**
     * The unique identifier of the project context for the prompt
     * @type {string}
     * @memberof PromptRequest
     */
    'project_id': string;
    /**
     * 
     * @type {string}
     * @memberof PromptRequest
     */
    'user_id'?: string | null;
    /**
     * The natural language prompt to be interpreted by the AI
     * @type {string}
     * @memberof PromptRequest
     */
    'prompt': string;
}
/**
 * TaskDto
 * @export
 * @interface TaskDto
 */
export interface TaskDto {
    /**
     * 
     * @type {number}
     * @memberof TaskDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TaskDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TaskDto
     */
    'description': string;
    /**
     * 
     * @type {TaskStatus}
     * @memberof TaskDto
     */
    'taskStatus': TaskStatus;
    /**
     * 
     * @type {string}
     * @memberof TaskDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TaskDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TaskDto
     */
    'comments': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TaskDto
     */
    'attachments': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof TaskDto
     */
    'assigneeId'?: number | null;
}


/**
 * TaskStatus
 * @export
 * @enum {string}
 */

export const TaskStatus = {
    Backlog: 'BACKLOG',
    Open: 'OPEN',
    InProgress: 'IN_PROGRESS',
    Done: 'DONE'
} as const;

export type TaskStatus = typeof TaskStatus[keyof typeof TaskStatus];


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AIInterpretationApi - axios parameter creator
 * @export
 */
export const AIInterpretationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Processes a natural language prompt to either generate new tasks or answer questions about existing tasks
         * @summary Interpret AI Prompt
         * @param {PromptRequest} promptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interpretInterpretPost: async (promptRequest: PromptRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptRequest' is not null or undefined
            assertParamExists('interpretInterpretPost', 'promptRequest', promptRequest)
            const localVarPath = `/interpret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promptRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AIInterpretationApi - functional programming interface
 * @export
 */
export const AIInterpretationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AIInterpretationApiAxiosParamCreator(configuration)
    return {
        /**
         * Processes a natural language prompt to either generate new tasks or answer questions about existing tasks
         * @summary Interpret AI Prompt
         * @param {PromptRequest} promptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async interpretInterpretPost(promptRequest: PromptRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenAIResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.interpretInterpretPost(promptRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AIInterpretationApi.interpretInterpretPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AIInterpretationApi - factory interface
 * @export
 */
export const AIInterpretationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AIInterpretationApiFp(configuration)
    return {
        /**
         * Processes a natural language prompt to either generate new tasks or answer questions about existing tasks
         * @summary Interpret AI Prompt
         * @param {PromptRequest} promptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interpretInterpretPost(promptRequest: PromptRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenAIResponse> {
            return localVarFp.interpretInterpretPost(promptRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AIInterpretationApi - object-oriented interface
 * @export
 * @class AIInterpretationApi
 * @extends {BaseAPI}
 */
export class AIInterpretationApi extends BaseAPI {
    /**
     * Processes a natural language prompt to either generate new tasks or answer questions about existing tasks
     * @summary Interpret AI Prompt
     * @param {PromptRequest} promptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIInterpretationApi
     */
    public interpretInterpretPost(promptRequest: PromptRequest, options?: RawAxiosRequestConfig) {
        return AIInterpretationApiFp(this.configuration).interpretInterpretPost(promptRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns Prometheus metrics for monitoring the GenAI service performance and usage
         * @summary Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricsMetricsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the health status of the GenAI service
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthzGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns Prometheus metrics for monitoring the GenAI service performance and usage
         * @summary Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricsMetricsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsMetricsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.getMetricsMetricsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the health status of the GenAI service
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthHealthzGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthHealthzGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthHealthzGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Returns Prometheus metrics for monitoring the GenAI service performance and usage
         * @summary Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricsMetricsGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getMetricsMetricsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the health status of the GenAI service
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthzGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthHealthzGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Returns Prometheus metrics for monitoring the GenAI service performance and usage
     * @summary Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public getMetricsMetricsGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).getMetricsMetricsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the health status of the GenAI service
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthHealthzGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthHealthzGet(options).then((request) => request(this.axios, this.basePath));
    }
}



